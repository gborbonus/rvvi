#!/bin/bash

# Default backup directory
BACKUP_DIR="/var/rvvi_backup"

# Source configuration file if it exists
CONFIG_FILE="/etc/default/rvvi"
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

# Function to list all backups with improved formatting
list_all_backups() {
    if [ -z "$(ls -A "$BACKUP_DIR")" ]; then
        echo "No backups found in $BACKUP_DIR"
        exit 0
    fi
    echo "Available backups in $BACKUP_DIR:"
    for backup in "$BACKUP_DIR"/*; do
        if [ -f "$backup" ]; then
            basename=$(basename "$backup")
            timestamp=$(stat -c '%Y' "$backup" | date -d "@$(cat -)" +'%Y-%m-%d %H:%M:%S')
            echo "- $basename (Date: $timestamp)"
        fi
    done
}

# Function to list backups for a specific file
list_file_backups() {
    local input_file="$1"
    local resolved_file=$(realpath "$input_file" 2>/dev/null || echo "$input_file")
    local file_base="$(echo "$resolved_file" | tr '/' '_')"
    # Regex pattern: exact file base followed by underscore and timestamp (YYYYMMDD_HHMMSS)
    local pattern="^${file_base}_[0-9]{8}_[0-9]{6}$"
    local backups=($(ls -1 "$BACKUP_DIR" | grep -E "$pattern"))

    if [ ${#backups[@]} -eq 0 ]; then
        echo "No backups found for $input_file"
        exit 0
    fi
    echo "Backups for $input_file:"
    for backup in "${backups[@]}"; do
        local timestamp=$(echo "$backup" | grep -oE '[0-9]{8}_[0-9]{6}$')
        local full_timestamp=$(stat -c '%Y' "$BACKUP_DIR/$backup" | date -d "@$(cat -)" +'%Y-%m-%d %H:%M:%S')
        echo "- Version: $timestamp (Date: $full_timestamp)"
    done
}

# Function to restore a backup and open in vi
restore_file() {
    local input_file="$1"
    local version="$2"
    local resolved_file=$(realpath "$input_file" 2>/dev/null || echo "$input_file")
    local file_base="$(echo "$resolved_file" | tr '/' '_')"
    # Regex pattern: exact file base followed by underscore and timestamp (YYYYMMDD_HHMMSS)
    local pattern="^${file_base}_[0-9]{8}_[0-9]{6}$"
    local backups=($(ls -1 "$BACKUP_DIR" | grep -E "$pattern"))

    if [ ${#backups[@]} -eq 0 ]; then
        echo "No backups found for $input_file"
        exit 0
    elif [ ${#backups[@]} -eq 1 ] && [ -z "$version" ]; then
        cp -p "$BACKUP_DIR/${backups[0]}" "$input_file" || { echo "Failed to restore $input_file"; exit 1; }
        echo "Restored $input_file from $BACKUP_DIR/${backups[0]}"
        vi "$input_file"
        exit 0
    elif [ -n "$version" ]; then
        local backup_file="${file_base}_${version}"
        if ls "$BACKUP_DIR" | grep -E "^${backup_file}$" >/dev/null; then
            cp -p "$BACKUP_DIR/$backup_file" "$input_file" || { echo "Failed to restore $input_file"; exit 1; }
            echo "Restored $input_file from $BACKUP_DIR/$backup_file"
            vi "$input_file"
        else
            echo "Error: Version $version not found for $input_file"
            list_file_backups "$input_file"
            exit 1
        fi
    else
        echo "Multiple backups found for $input_file. Please specify a version:"
        list_file_backups "$input_file"
        exit 1
    fi
}

# Help message
show_help() {
    echo "Usage: $0 [--list] <filename> [version]"
    echo "  --list: List all backups"
    echo "  <filename>: List or restore backups for a file"
    echo "  [version]: Specify a version (e.g., 20250401_123456) to restore"
    echo "Restore Vi (rvi) - Restores a file backup and opens it in vi."
    echo "Default backup directory: $BACKUP_DIR (configurable via $CONFIG_FILE)"
    exit 0
}

# Check for help flag
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
fi

# Main logic
case "$1" in
    "--list")
        list_all_backups
        ;;
    "")
        echo "Error: No arguments provided"
        show_help
        ;;
    *)
        if [ -n "$2" ]; then
            restore_file "$1" "$2"
        else
            restore_file "$1"
        fi
        ;;
esac
